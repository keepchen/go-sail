name: "Test Coverage"

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql-8:
        image: mysql:8.0.23
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: go_sail
        ports: ["3306:3306"]
      redis-6:
        image: redis:6-alpine
        ports: ["6379:6379"]
    steps:
      - uses: actions/checkout@v4

      - name: Start etcd container
        run: |
          # Log in to ghcr.io
          echo "${{ secrets.GHCRIO_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCRIO_USERNAME }}" --password-stdin

          # 启动单节点 etcd，暴露客户端端口 2379
          docker run -d --name etcd-server \
              --publish 2379:2379 \
              --publish 2380:2380 \
              --env ALLOW_NONE_AUTHENTICATION=yes \
              --env ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379 \
              ghcr.io/keepchen/etcd:3.6.3

          sleep 5  # 等待容器启动

      - name: Verify etcd
        run: |
          # 安装 etcdctl 客户端
          sudo apt-get update && sudo apt-get install -y etcd-client

          # 检查健康状态
          etcdctl endpoint health --endpoints=http://127.0.0.1:2379
          etcdctl --endpoints=http://127.0.0.1:2379 member list

      - name: Test etcd
        run: |
          # 读写测试
          etcdctl --endpoints=http://127.0.0.1:2379 put foo bar
          etcdctl --endpoints=http://127.0.0.1:2379 get foo

      - name: Install Redis (Cluster)
        run: |
          # sudo apt-get update
          # sudo apt-get install -y redis-server redis-tools
          #
          curl -fsSL https://download.redis.io/releases/redis-6.2.6.tar.gz -o redis.tar.gz
          tar xzf redis.tar.gz
          cd redis-6.2.6 && make -j$(nproc)
          sudo make install

      - name: Configure Redis Cluster Nodes
        run: |
          # 创建6个节点的配置（3主3从）
          chmod +x scripts/setup-redis-cluster.sh
          ./scripts/setup-redis-cluster.sh

      - name: Start Redis (Cluster)
        run: |
          for port in 7000 7001 7002 7003 7004 7005; do
            # debug
            cat redis-cluster/$port/redis.conf
            redis-server redis-cluster/$port/redis.conf
          done
          sleep 20  # 等待实例启动
          ps aux | grep redis-server
          ss -tln | grep -E '7000|7001|7002|7003|7004|7005'

      - name: Create Redis (Cluster)
        run: |
          # # 自动确认集群配置
          # echo "yes" | redis-cli --cluster create \
          #   127.0.0.1:7000 \
          #   127.0.0.1:7001 \
          #   127.0.0.1:7002 \
          #   127.0.0.1:7003 \
          #   127.0.0.1:7004 \
          #   127.0.0.1:7005 \
          #   --cluster-replicas 1
          #
          # 让 6 个节点互相认识（用 7000 发起 meet）
          for port in 7001 7002 7003 7004 7005; do
            redis-cli -p $port cluster meet 127.0.0.1 7000
          done
          sleep 3
          # 手动分配槽位：每个 master 分 5461 个槽（共 16384 槽）
          redis-cli -p 7000 cluster addslots $(seq 0 5460)
          redis-cli -p 7001 cluster addslots $(seq 5461 10922)
          redis-cli -p 7002 cluster addslots $(seq 10923 16383)
          # 设置 3 个从节点为各自的 replica
          NODE0=$(redis-cli -p 7000 cluster myid)
          NODE1=$(redis-cli -p 7001 cluster myid)
          NODE2=$(redis-cli -p 7002 cluster myid)

          redis-cli -p 7003 cluster replicate $NODE0
          redis-cli -p 7004 cluster replicate $NODE1
          redis-cli -p 7005 cluster replicate $NODE2

      - name: Verify Cluster Status
        run: |
          sleep 5
          redis-cli --cluster check 127.0.0.1:7000

      - name: Install Valkey (Cluster)
        run: |
          # 安装依赖项
          sudo apt-get update
          sudo apt-get install -y build-essential tcl

          # 下载并编译 Valkey
          git clone https://github.com/valkey-io/valkey.git
          cd valkey
          make -j$(nproc)          # 多线程编译加速
          sudo make install        # 安装到系统路径

      - name: Configure Valkey Cluster Nodes
        run: |
          # 创建 6 个节点（3主3从）
          chmod +x scripts/setup-valkey-cluster.sh
          ./scripts/setup-valkey-cluster.sh

      - name: Start Valkey (Cluster)
        run: |
          for port in 8000 8001 8002 8003 8004 8005; do
            # debug
            cat valkey-cluster/$port/valkey.conf
            valkey-server valkey-cluster/$port/valkey.conf
          done
          sleep 20  # 等待实例启动
          ps aux | grep valkey-server
          ss -tln | grep -E '8000|8001|8002|8003|8004|8005'

      - name: Create Valkey Cluster
        run: |
          # 自动确认集群配置
          echo "yes" | valkey-cli --cluster create \
            127.0.0.1:8000 \
            127.0.0.1:8001 \
            127.0.0.1:8002 \
            127.0.0.1:8003 \
            127.0.0.1:8004 \
            127.0.0.1:8005 \
            --cluster-replicas 1

      - name: Verify Cluster Status
        run: |
          valkey-cli --cluster check 127.0.0.1:8000

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Test
        run: go test $(go list ./... |grep -v /examples/ |grep -v /static/ |grep -v /plugins/) -v -coverprofile=coverage.txt

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
